package edu.drexel.cs680.prj1.giveorders;

<<<<<<< HEAD
import java.util.ArrayList;
=======
import java.util.HashSet;
>>>>>>> 44d7254e4321aaa33722f8c69ca2aa4bde47c783
import java.util.List;
import java.util.Set;

import edu.drexel.cs680.prj1.executeorders.ExecuteOrders;
import edu.drexel.cs680.prj1.perception.AgentState;
import edu.drexel.cs680.prj1.perception.Perception;
import eisbot.proxy.JNIBWAPI;
import eisbot.proxy.model.Unit;
import eisbot.proxy.types.UnitType.UnitTypes;

public class GiveOrders {

	private JNIBWAPI bwapi;
	public static GiveOrders instance;
	
	public boolean gatheringGas;
	public boolean gatheringMinerals;
	public boolean foundGas;
	public boolean foundMinerals;

	public GiveOrders(JNIBWAPI bwapi) {
		instance = this;
		this.bwapi = bwapi;
		
		gatheringMinerals = false;
		gatheringGas = false;
		foundGas = false;
		foundMinerals = false;
	}

	// public void sendOrders() {
	// if (Strategy.instance.currentState.equals(Strategy.States.Attack)) {
	// attackEnemy();
	// } else if (Strategy.instance.currentState == Strategy.States.Defend) {
	// defend();
	// } else if (Strategy.instance.currentState == Strategy.States.Build) {
	// build();
	// } else if (Strategy.instance.currentState == Strategy.States.Explore) {
	// explore();
	// }
	// }

	private void explore() {
		// TODO Auto-generated method stub

	}
<<<<<<< HEAD
	
	private void gatherMinerals()
	{
		if(!foundMinerals)
		// TODO make a Zerg Drone gather minerals.  Use half of what's idle

	    System.out.println("Gathering minerals...");
	}
	
	private void gatherGas()
	{
		if(!foundGas)
			return;
		
		// TODO make a Zerg Drone gather minerals.  Use half of what's idle
=======

	private void gatherMinerals() {
		// TODO make a Zerg Drone gather minerals. Use half of what's idle
		System.out.println("Gathering minerals...");
	}

	private void gatherGas() {
		// TODO make a Zerg Drone gather minerals. Use half of what's idle
>>>>>>> 44d7254e4321aaa33722f8c69ca2aa4bde47c783
		System.out.println("Gathering gas...");
	}

	private void buildExtractor() {
		// TODO make a Zerg Drone create an extractor. Needs to find a gas
		// source, though
		System.out.println("Attempting to create extractor...");
	}
	
	private void searchForGas()
	{
		// TODO makes a Zerg Drone (that's idle) look for an available gas chamber
		int close_gas_id = -1;
		
		if(foundGas)
			return;
		
		//Unit searchingUnit;
		//if(Perception.instance.listOfUnitsIdleByType.get(UnitTypes.Zerg_Drone).size()==0)
		//	return;
		
		// if no available units, return
		// otherwise have an available drone look for gas...
		for(Unit everyUnit: Perception.instance.listOfUnitsIdleByType.get(UnitTypes.Zerg_Drone))
		{
			close_gas_id = Perception.instance.getNearestGasChamber(everyUnit);
			if(close_gas_id==-1)
			{
				continue;
			}
			else
			{
				bwapi.rightClick(everyUnit.getID(), close_gas_id);
				System.out.println("Found Gas!");
				foundGas=true;
				
				break;
			}
				
		}
			
	}
	
	private void searchForMinerals()
	{
		// TODO makes a Zerg Drone (that's idle) look for an available MineralField
		int close_mineral_id = -1;
		
		System.out.println("SEarching.....");
		
		//if(foundMinerals)
		//	return;
		
		Unit searchingUnit;
		//if(Perception.instance.listOfUnitsIdleByType.get(UnitTypes.Zerg_Drone).size()==0)
		//	return;
		
		// if no available units, return
		// otherwise have an available drone look for gas...
		//for(Unit everyUnit: Perception.instance.listOfUnitsIdleByType.get(UnitTypes.Zerg_Drone))
		for(Unit everyUnit: bwapi.getMyUnits())
		{
			if(!(everyUnit.getTypeID()==UnitTypes.Zerg_Drone.ordinal()))
				continue;
			
			System.out.println("Checking id: " + everyUnit.getID());
			close_mineral_id = Perception.instance.getNearestMineralField(everyUnit);
			System.out.println("Closest is " + close_mineral_id);
			if(close_mineral_id==-1)
			{
				continue;
			}
			else
			{
				bwapi.rightClick(everyUnit.getID(), close_mineral_id);
				System.out.println("Found Minerals!");
				foundGas=true;
				break;
			}
				
		}
			
	}

	private void build() {
		// TODO Auto-generated method stub

		/**
		 * This is the build state, the AI is in this state because of the
		 * following factors that may not be present
		 */

		// TODO move logic to Strategy, This module should not know of
		// Percetpion
		// check if there are enough resources
<<<<<<< HEAD
		if(Perception.instance.totalMinerals < 100)			// this is from the Strategy "enoughResourcesAvailable" method
		{
			if(gatheringMinerals)
				gatherMinerals();
			else
				searchForMinerals();
			
		}

		//TODO move logic to Strategy
//		if(Perception.instance.buildingExtractor < 1)
//			buildExtractor();
		
		if(Perception.instance.totalGas< 100)
		{
			if(gatheringGas)
				gatherGas();
			else
				searchForGas();
		}
		
=======
		// if(Perception.instance.totalMinerals < 100) // this is from the
		// Strategy "enoughResourcesAvailable" method
		// gatherMinerals();

		// TODO move logic to Strategy
		// if(Perception.instance.buildingExtractor < 1)
		// buildExtractor();

		// if(Perception.instance.totalGas< 100)
		// gatherGas();

>>>>>>> 44d7254e4321aaa33722f8c69ca2aa4bde47c783
	}

	private void defend() {
		// TODO Auto-generated method stub

	}

	// Set<Unit> allEnemyUnits = Perception.instance.allVisibleEnemyUnits();
	// Set<Unit> allIdleZerglings = Perception.instance.listOfUnitsByType
	// .get(UnitTypes.Zerg_Zergling);
	public void attackEnemy(Set<Unit> allEnemyUnits,
			Set<Unit> allIdleZerglings) {
		System.out.println(String.format("Enemy/Player:%d/%d",
				allEnemyUnits.size(), allIdleZerglings.size()));
		ExecuteOrders.instance
				.moveCloseToEnemy(allIdleZerglings, allEnemyUnits);
		attack(allIdleZerglings, allEnemyUnits);
	}

	private void attack(Set<Unit> allIdleZerglings, Set<Unit> allEnemyUnits) {
		for (Unit unit : allIdleZerglings) {
			for (Unit enemy : allEnemyUnits) {
				System.out.println(String.format("Attack Enemy Unit#>>>%d<<<",
						unit.getID()));
				bwapi.attack(unit.getID(), enemy.getX(), enemy.getY());
				break;
			}
		}
	}

	public void morpToDrones(Set<Unit> larvae) {
		if (larvae==null) {
			return;
		}
		
		for (Unit larva : larvae) {
			ExecuteOrders.instance.morphToDrone(larva);
		}
	}

	public Set<Unit> collectMinerals(Set<Unit> drones, Set<Unit> minerals) {
//		System.out.println("collectMinerals!");
		Set<Unit> claimedMinerals = new HashSet<Unit>();
		
		if (drones==null || drones.isEmpty() || minerals==null || minerals.isEmpty()){
			return claimedMinerals;
		}
		for (Unit drone : drones) {
			for (Unit mineral : minerals) {
				double distance = Math.sqrt(Math.pow(
						mineral.getX() - drone.getX(), 2)
						+ Math.pow(mineral.getY() - drone.getY(), 2));
//				System.out.println("distance: " + distance);
				if (distance < 300) {
					bwapi.rightClick(drone.getID(), mineral.getID());
					claimedMinerals.add(mineral);
					break;
				}
			}
		}
		return claimedMinerals;
	}

	public int buildSpawingPools(Set<Unit> drones, Set<Unit> overlords) {
		int poolDrone = drones.toArray(new Unit[0])[0].getID();

		for (Unit overlord : overlords) {
			ExecuteOrders.instance.buildSpawinPool(poolDrone, overlord);
		}
		return poolDrone;
	}

	public static void morphToOverlord(Set<Unit> larvae) {
		for (Unit larva : larvae) {
			ExecuteOrders.instance.morphToOverlord(larva);
		}
	}

	public void spawnZerglings(Set<Unit> larvae, Set<Unit> completedSpawingPools) {
		if (completedSpawingPools==null || completedSpawingPools.isEmpty() || larvae==null || larvae.isEmpty()){
			return;
		}
		
		for (Unit completedSpawningPool : completedSpawingPools) {
			for (Unit larva : larvae) {
				bwapi.morph(larva.getID(), UnitTypes.Zerg_Zergling.ordinal());
			}				
		}
	}

	public void moveZerglingsToEnemenyLocation() {
		// TODO Auto-generated method stub
		
	}

	public void attackEnemenyLocation() {
		// TODO Auto-generated method stub
		
	}

	public void sendPatrol(Set<Unit> patrolers) {
		// TODO Auto-generated method stub
		
	}
}
